{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchUser as requestUser } from 'utils/api';\nconst initialState = {\n  current: null\n};\nexport const SLICE_NAME = 'user';\nexport const fetchUser = createAsyncThunk(`${SLICE_NAME}/fetchUser`, async username => {\n  const {\n    data: user\n  } = await requestUser(username);\n  return {\n    user\n  };\n});\nexport const userSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    clearItemWithComments: state => {\n      state.current = null;\n    }\n  },\n  extraReducers: {\n    [fetchUser.fulfilled.type]: (state, action) => {\n      state.current = action.payload.user;\n    }\n  }\n});\nexport const {\n  clearItemWithComments\n} = userSlice.actions;\nexport const currentUserSelector = _ref => {\n  let {\n    user\n  } = _ref;\n  return user === null || user === void 0 ? void 0 : user.current;\n};\nexport default userSlice.reducer;","map":{"version":3,"sources":["/Users/tolulopeadetula/Documents/GitHub/hackernews/src/store/slices/user.ts"],"names":["createAsyncThunk","createSlice","fetchUser","requestUser","initialState","current","SLICE_NAME","username","data","user","userSlice","name","reducers","clearItemWithComments","state","extraReducers","fulfilled","type","action","payload","actions","currentUserSelector","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA6D,kBAA7D;AAIA,SAASC,SAAS,IAAIC,WAAtB,QAAyC,WAAzC;AAQA,MAAMC,YAAuB,GAAG;AAC9BC,EAAAA,OAAO,EAAE;AADqB,CAAhC;AAIA,OAAO,MAAMC,UAAU,GAAG,MAAnB;AAEP,OAAO,MAAMJ,SAAS,GAAGF,gBAAgB,CACtC,GAAEM,UAAW,YADyB,EAEvC,MAAOC,QAAP,IAA4B;AAC1B,QAAM;AAAEC,IAAAA,IAAI,EAAEC;AAAR,MAAiB,MAAMN,WAAW,CAACI,QAAD,CAAxC;AAEA,SAAO;AACLE,IAAAA;AADK,GAAP;AAGD,CARsC,CAAlC;AAWP,OAAO,MAAMC,SAAS,GAAGT,WAAW,CAAC;AACnCU,EAAAA,IAAI,EAAEL,UAD6B;AAEnCF,EAAAA,YAFmC;AAGnCQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,qBAAqB,EAAGC,KAAD,IAAsB;AAC3CA,MAAAA,KAAK,CAACT,OAAN,GAAgB,IAAhB;AACD;AAHO,GAHyB;AAQnCU,EAAAA,aAAa,EAAE;AACb,KAACb,SAAS,CAACc,SAAV,CAAoBC,IAArB,GAA4B,CAC1BH,KAD0B,EAE1BI,MAF0B,KAKvB;AACHJ,MAAAA,KAAK,CAACT,OAAN,GAAgBa,MAAM,CAACC,OAAP,CAAeV,IAA/B;AACD;AARY;AARoB,CAAD,CAA7B;AAoBP,OAAO,MAAM;AAAEI,EAAAA;AAAF,IAA4BH,SAAS,CAACU,OAA5C;AAEP,OAAO,MAAMC,mBAAmB,GAAG;AAAA,MAAC;AAAEZ,IAAAA;AAAF,GAAD;AAAA,SACjCA,IADiC,aACjCA,IADiC,uBACjCA,IAAI,CAAEJ,OAD2B;AAAA,CAA5B;AAGP,eAAeK,SAAS,CAACY,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { RootState } from 'store/rootReducer';\n\nimport { fetchUser as requestUser } from 'utils/api';\n\nimport { UserInterface } from 'types/user';\n\ninterface UserState {\n  current: UserInterface | null;\n}\n\nconst initialState: UserState = {\n  current: null,\n};\n\nexport const SLICE_NAME = 'user';\n\nexport const fetchUser = createAsyncThunk(\n  `${SLICE_NAME}/fetchUser`,\n  async (username: string) => {\n    const { data: user } = await requestUser(username);\n\n    return {\n      user,\n    };\n  }\n);\n\nexport const userSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    clearItemWithComments: (state: UserState) => {\n      state.current = null;\n    },\n  },\n  extraReducers: {\n    [fetchUser.fulfilled.type]: (\n      state: UserState,\n      action: PayloadAction<{\n        user: UserInterface;\n      }>\n    ) => {\n      state.current = action.payload.user;\n    },\n  },\n});\n\nexport const { clearItemWithComments } = userSlice.actions;\n\nexport const currentUserSelector = ({ user }: RootState) =>\n  user?.current as UserInterface | null;\n\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}