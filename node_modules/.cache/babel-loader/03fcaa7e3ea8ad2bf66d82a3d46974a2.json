{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { COMMENTS_LIMIT } from 'config/pagination';\nimport { fetchItem } from 'utils/api';\nconst initialState = {\n  story: null,\n  comments: []\n};\nexport const SLICE_NAME = 'item';\nexport const fetchItemWithComments = createAsyncThunk(`${SLICE_NAME}/fetchItemWithComments`, async id => {\n  const {\n    data: story\n  } = await fetchItem(id);\n  const commentsPaginated = story.kids ? story.kids.slice(0, COMMENTS_LIMIT) : []; // First depth level comments\n\n  const comments = await Promise.all(commentsPaginated.map(kid => new Promise(resolve => {\n    fetchItem(kid).then(response => resolve(response.data));\n  })));\n  return {\n    item: story,\n    comments\n  };\n});\nexport const itemSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    clearItemWithComments: state => {\n      state.story = null;\n      state.comments = [];\n    }\n  },\n  extraReducers: {\n    [fetchItemWithComments.fulfilled.type]: (state, action) => {\n      state.story = action.payload.item;\n      state.comments = action.payload.comments;\n    }\n  }\n});\nexport const {\n  clearItemWithComments\n} = itemSlice.actions;\nexport const itemSelector = _ref => {\n  let {\n    item\n  } = _ref;\n  return item === null || item === void 0 ? void 0 : item.story;\n};\nexport const commentsSelector = _ref2 => {\n  let {\n    item\n  } = _ref2;\n  return item === null || item === void 0 ? void 0 : item.comments;\n};\nexport default itemSlice.reducer;","map":{"version":3,"sources":["/Users/tolulopeadetula/Documents/GitHub/hackernews/src/store/slices/item.ts"],"names":["createAsyncThunk","createSlice","COMMENTS_LIMIT","fetchItem","initialState","story","comments","SLICE_NAME","fetchItemWithComments","id","data","commentsPaginated","kids","slice","Promise","all","map","kid","resolve","then","response","item","itemSlice","name","reducers","clearItemWithComments","state","extraReducers","fulfilled","type","action","payload","actions","itemSelector","commentsSelector","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA6D,kBAA7D;AAGA,SAASC,cAAT,QAA+B,mBAA/B;AAEA,SAASC,SAAT,QAA0B,WAA1B;AAUA,MAAMC,YAAuB,GAAG;AAC9BC,EAAAA,KAAK,EAAE,IADuB;AAE9BC,EAAAA,QAAQ,EAAE;AAFoB,CAAhC;AAKA,OAAO,MAAMC,UAAU,GAAG,MAAnB;AAEP,OAAO,MAAMC,qBAAqB,GAAGR,gBAAgB,CAClD,GAAEO,UAAW,wBADqC,EAEnD,MAAOE,EAAP,IAAsB;AACpB,QAAM;AAAEC,IAAAA,IAAI,EAAEL;AAAR,MAAkB,MAAMF,SAAS,CAACM,EAAD,CAAvC;AAEA,QAAME,iBAAiB,GAAGN,KAAK,CAACO,IAAN,GACtBP,KAAK,CAACO,IAAN,CAAWC,KAAX,CAAiB,CAAjB,EAAoBX,cAApB,CADsB,GAEtB,EAFJ,CAHoB,CAOpB;;AACA,QAAMI,QAAQ,GAAG,MAAMQ,OAAO,CAACC,GAAR,CACrBJ,iBAAiB,CAACK,GAAlB,CACGC,GAAD,IACE,IAAIH,OAAJ,CAAaI,OAAD,IAAa;AACvBf,IAAAA,SAAS,CAACc,GAAD,CAAT,CAAeE,IAAf,CAAqBC,QAAD,IAClBF,OAAO,CAACE,QAAQ,CAACV,IAAV,CADT;AAGD,GAJD,CAFJ,CADqB,CAAvB;AAWA,SAAO;AACLW,IAAAA,IAAI,EAAEhB,KADD;AAELC,IAAAA;AAFK,GAAP;AAID,CAzBkD,CAA9C;AA4BP,OAAO,MAAMgB,SAAS,GAAGrB,WAAW,CAAC;AACnCsB,EAAAA,IAAI,EAAEhB,UAD6B;AAEnCH,EAAAA,YAFmC;AAGnCoB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,qBAAqB,EAAGC,KAAD,IAAsB;AAC3CA,MAAAA,KAAK,CAACrB,KAAN,GAAc,IAAd;AACAqB,MAAAA,KAAK,CAACpB,QAAN,GAAiB,EAAjB;AACD;AAJO,GAHyB;AASnCqB,EAAAA,aAAa,EAAE;AACb,KAACnB,qBAAqB,CAACoB,SAAtB,CAAgCC,IAAjC,GAAwC,CACtCH,KADsC,EAEtCI,MAFsC,KAMnC;AACHJ,MAAAA,KAAK,CAACrB,KAAN,GAAcyB,MAAM,CAACC,OAAP,CAAeV,IAA7B;AACAK,MAAAA,KAAK,CAACpB,QAAN,GAAiBwB,MAAM,CAACC,OAAP,CAAezB,QAAhC;AACD;AAVY;AAToB,CAAD,CAA7B;AAuBP,OAAO,MAAM;AAAEmB,EAAAA;AAAF,IAA4BH,SAAS,CAACU,OAA5C;AAEP,OAAO,MAAMC,YAAY,GAAG;AAAA,MAAC;AAAEZ,IAAAA;AAAF,GAAD;AAAA,SAC1BA,IAD0B,aAC1BA,IAD0B,uBAC1BA,IAAI,CAAEhB,KADoB;AAAA,CAArB;AAGP,OAAO,MAAM6B,gBAAgB,GAAG;AAAA,MAAC;AAAEb,IAAAA;AAAF,GAAD;AAAA,SAC9BA,IAD8B,aAC9BA,IAD8B,uBAC9BA,IAAI,CAAEf,QADwB;AAAA,CAAzB;AAGP,eAAegB,SAAS,CAACa,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from 'store/rootReducer';\n\nimport { COMMENTS_LIMIT } from 'config/pagination';\n\nimport { fetchItem } from 'utils/api';\n\nimport { StoryInterface } from 'types/story';\nimport { CommentInterface, CommentsTree } from 'types/comment';\n\ninterface ItemState {\n  story: StoryInterface | null;\n  comments: CommentsTree;\n}\n\nconst initialState: ItemState = {\n  story: null,\n  comments: [],\n};\n\nexport const SLICE_NAME = 'item';\n\nexport const fetchItemWithComments = createAsyncThunk(\n  `${SLICE_NAME}/fetchItemWithComments`,\n  async (id: number) => {\n    const { data: story } = await fetchItem(id);\n\n    const commentsPaginated = story.kids\n      ? story.kids.slice(0, COMMENTS_LIMIT)\n      : [];\n\n    // First depth level comments\n    const comments = await Promise.all(\n      commentsPaginated.map(\n        (kid: number): Promise<CommentInterface> =>\n          new Promise((resolve) => {\n            fetchItem(kid).then((response) =>\n              resolve(response.data as CommentInterface)\n            );\n          })\n      )\n    );\n\n    return {\n      item: story as StoryInterface,\n      comments,\n    };\n  }\n);\n\nexport const itemSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    clearItemWithComments: (state: ItemState) => {\n      state.story = null;\n      state.comments = [];\n    },\n  },\n  extraReducers: {\n    [fetchItemWithComments.fulfilled.type]: (\n      state: ItemState,\n      action: PayloadAction<{\n        item: StoryInterface;\n        comments: CommentInterface[];\n      }>\n    ) => {\n      state.story = action.payload.item;\n      state.comments = action.payload.comments;\n    },\n  },\n});\n\nexport const { clearItemWithComments } = itemSlice.actions;\n\nexport const itemSelector = ({ item }: RootState) =>\n  item?.story as StoryInterface | null;\n\nexport const commentsSelector = ({ item }: RootState) =>\n  item?.comments as CommentInterface[];\n\nexport default itemSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}