{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { createSelector } from 'reselect';\nimport { STORIES_PER_PAGE } from 'config/pagination';\nimport { fetchItem, fetchStories } from 'utils/api';\nimport { removeUriFromUrl } from 'utils/helpers/removeUri';\nconst initialState = {\n  stories: [],\n  lists: {\n    top: [],\n    new: [],\n    show: [],\n    ask: [],\n    job: []\n  }\n};\nexport const SLICE_NAME = 'stories';\nexport const fetchStoriesList = createAsyncThunk(`${SLICE_NAME}/fetchStoriesList`, async type => {\n  const {\n    data: storiesList\n  } = await fetchStories(type);\n  return {\n    list: type,\n    listItems: storiesList\n  };\n});\nexport const fetchListItems = createAsyncThunk(`${SLICE_NAME}/fetchListItems`, async (_ref, _ref2) => {\n  let {\n    type,\n    page = 1\n  } = _ref;\n  let {\n    getState\n  } = _ref2;\n  const {\n    stories: storiesState\n  } = getState();\n  const list = storiesState.lists[type];\n  const paginatedStoriesList = list.slice(STORIES_PER_PAGE * (page - 1), STORIES_PER_PAGE * page);\n  const stories = await Promise.all(paginatedStoriesList.map(id => new Promise(resolve => {\n    fetchItem(id).then(response => resolve(response.data));\n  })));\n  stories.forEach(item => item.url && (item.domainUrl = removeUriFromUrl(item.url)));\n  return {\n    items: stories\n  };\n});\nexport const storiesSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    clearStoriesList: state => {\n      state.stories = [];\n    }\n  },\n  extraReducers: {\n    [fetchStoriesList.fulfilled.type]: (state, action) => {\n      state.lists[action.payload.list] = action.payload.listItems;\n    },\n    [fetchListItems.fulfilled.type]: (state, action) => {\n      state.stories = action.payload.items;\n    }\n  }\n});\nexport const {\n  clearStoriesList\n} = storiesSlice.actions;\nexport const storiesSelector = _ref3 => {\n  let {\n    stories\n  } = _ref3;\n  return stories === null || stories === void 0 ? void 0 : stories.stories;\n};\nexport const storiesTotalCountSelector = type => createSelector(state => {\n  var _state$stories;\n\n  return state === null || state === void 0 ? void 0 : (_state$stories = state.stories) === null || _state$stories === void 0 ? void 0 : _state$stories.lists;\n}, lists => {\n  var _lists$type;\n\n  return lists === null || lists === void 0 ? void 0 : (_lists$type = lists[type]) === null || _lists$type === void 0 ? void 0 : _lists$type.length;\n});\nexport default storiesSlice.reducer;","map":{"version":3,"sources":["/Users/tolulopeadetula/Documents/GitHub/hackernews/src/store/slices/stories.ts"],"names":["createAsyncThunk","createSlice","createSelector","STORIES_PER_PAGE","fetchItem","fetchStories","removeUriFromUrl","initialState","stories","lists","top","new","show","ask","job","SLICE_NAME","fetchStoriesList","type","data","storiesList","list","listItems","fetchListItems","page","getState","storiesState","paginatedStoriesList","slice","Promise","all","map","id","resolve","then","response","forEach","item","url","domainUrl","items","storiesSlice","name","reducers","clearStoriesList","state","extraReducers","fulfilled","action","payload","actions","storiesSelector","storiesTotalCountSelector","length","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { createSelector } from 'reselect';\n\nimport { RootState } from 'store/rootReducer';\n\nimport { STORIES_PER_PAGE } from 'config/pagination';\n\nimport { fetchItem, fetchStories } from 'utils/api';\nimport { removeUriFromUrl } from 'utils/helpers/removeUri';\n\nimport { StoryInterface, StoryListsTypes } from 'types/story';\n\ninterface StoriesState {\n  stories: StoryInterface[];\n  lists: {\n    top: number[];\n    new: number[];\n    show: number[];\n    ask: number[];\n    job: number[];\n  };\n}\n\nconst initialState: StoriesState = {\n  stories: [],\n  lists: {\n    top: [],\n    new: [],\n    show: [],\n    ask: [],\n    job: [],\n  },\n};\n\nexport const SLICE_NAME = 'stories';\n\nexport const fetchStoriesList = createAsyncThunk(\n  `${SLICE_NAME}/fetchStoriesList`,\n  async (type: StoryListsTypes) => {\n    const { data: storiesList } = await fetchStories(type);\n\n    return {\n      list: type,\n      listItems: storiesList,\n    };\n  }\n);\n\nexport const fetchListItems = createAsyncThunk(\n  `${SLICE_NAME}/fetchListItems`,\n  async (\n    {\n      type,\n      page = 1,\n    }: {\n      type: StoryListsTypes;\n      page: number;\n    },\n    { getState }\n  ) => {\n    const { stories: storiesState } = getState() as RootState;\n    const list = storiesState.lists[type] as number[];\n\n    const paginatedStoriesList = list.slice(\n      STORIES_PER_PAGE * (page - 1),\n      STORIES_PER_PAGE * page\n    );\n\n    const stories = await Promise.all(\n      paginatedStoriesList.map(\n        (id: number): Promise<StoryInterface> =>\n          new Promise<StoryInterface>((resolve) => {\n            fetchItem(id).then((response) =>\n              resolve(response.data as StoryInterface)\n            );\n          })\n      )\n    );\n\n    stories.forEach(\n      (item: StoryInterface) =>\n        item.url && (item.domainUrl = removeUriFromUrl(item.url))\n    );\n\n    return {\n      items: stories,\n    };\n  }\n);\n\nexport const storiesSlice = createSlice({\n  name: SLICE_NAME,\n  initialState,\n  reducers: {\n    clearStoriesList: (state: StoriesState) => {\n      state.stories = [];\n    },\n  },\n  extraReducers: {\n    [fetchStoriesList.fulfilled.type]: (\n      state: StoriesState,\n      action: PayloadAction<{\n        list: StoryListsTypes;\n        listItems: number[];\n      }>\n    ) => {\n      state.lists[action.payload.list] = action.payload.listItems;\n    },\n    [fetchListItems.fulfilled.type]: (\n      state: StoriesState,\n      action: PayloadAction<{\n        items: StoryInterface[];\n      }>\n    ) => {\n      state.stories = action.payload.items;\n    },\n  },\n});\n\nexport const { clearStoriesList } = storiesSlice.actions;\n\nexport const storiesSelector = ({ stories }: RootState) =>\n  stories?.stories as StoryInterface[];\n\nexport const storiesTotalCountSelector = (type: StoryListsTypes) =>\n  createSelector(\n    (state: RootState) => state?.stories?.lists,\n    (lists) => lists?.[type]?.length as number\n  );\n\nexport default storiesSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}